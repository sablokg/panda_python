# Understanding pandas basic
! [PythonDataScience]: (https://www.oreilly.com/library/view/python-data-science/9781491912126/)

# Creating a series in Panda 

data = pd.series ([0.25, 0.5, 0.75, 1.0])
data
0    0.25
1    0.50
2    0.75
3    1.00
dtype: float64 <- Now this is the type of the data that you have entered you can also such type from the type function in python such as type().

data.values() <- Understand here that .values is a method that we are adding to the data frame. Methods and functions are different in python. Since the method is calling the () in the last it means it is defining the outside function. 

data.index() <- Here the .index is a method that is applied to the dataframe to see the index. Since the method is calling the () in the last it means it is defining the outside function. 

# Start indexing the data : In pandas or in general data structure, the indexes starts with the 0 and then goes forwards such look at this data frame  

([0.25, 0.5, 0.75, 1.0])

# In this the index for 0 is 0.25, index for 1 is 0.5

data [1] <- Give me the value associated with the index 1. 
0.5
data [1:3] <- Understand this, here the calling of the index is in the slice :, slice means [start:stop], so the index starts at 1 and stops at 3
0.25
0.75

# Associating the string with the indexes
data = pd.Series([0.25, 0.5, 0.75, 1.0],
                 index=['a', 'b', 'c', 'd'])
data
a    0.25
b    0.50
c    0.75
d    1.00
dtype: float64 

# this is the same as the sql function, where you are inserting the values into the table and associating them with the columns, so the first array defines the columns and the second array defines the index. Now if we call this index as 

data ['b'] <- So here the defined index will take place instead of the default index. 
0.5
data ['b':'d'] <- Now here i make two slice of the data and you can see below, in the first it is starting with the b and ending at d 
b    0.50
c    0.75
d    1.00
 data ['b':'c'] <- In this it is starting at b and ending at c, you can make n number of slices 
b    0.50
c    0.75

# listing the data with the pre defined number indexes
data = pd.Series([0.25, 0.5, 0.75, 1.0],
                 index=[2, 5, 3, 7])
data
2    0.25
5    0.50
3    0.75
7    1.00
dtype: float64
#  calling a slice function on this series
data [2:5]
3    0.75
7    1.00

# reading a dictonary as data frame and then slicing it for the information

dict= { 'list': 24, 
        'true':28,
        'learn':28
}
dict 
{'list': 24, 'true': 28, 'learn': 28}
type(dict)
<class 'dict'> <- To understand the type of the dict, use type()
 # Understand the dictionary, '' is representing a string, : is representing a scalar and the combined is representing a sequence to scalar mapping 

data = pd.Series(dict)
data
list     24
true     28
learn    28
dtype: int64
# Applying the slice on the dict pattern
data ['list':'learn']
list     24
true     28
learn    28
dtype: int64

# Assigining the same key to the series 

pd.Series(5, index=[100, 200, 300]) 
100    5
200    5
300    5
dtype: int64
pd.Series('list', index=[100, 200, 300])
100    list
200    list
300    list

# Another way of indexing the data in the series is 

a) pd.Series({2:'a', 1:'b', 3:'c'})
1    b
2    a
3    c
dtype: object

b) pd.Series({2:'a', 1:'b', 3:'c'}, index=[3, 2])
3    c
2    a
dtype: object

## In the above indexing, see the difference between the a) and b), in case of the a), complete index is defined, whereas in case of b), althrough the complete  index is defined, but the index frame is also defined, so pd.Series(data, index=index)

# Combining the two data frames in pandas 

# First data frame 
population_dict = {'California': 38332521,
                   'Texas': 26448193,
                   'New York': 19651127,
                   'Florida': 19552860,
                   'Illinois': 12882135}
population = pd.Series(population_dict)
# Second data frame
area_dict = {'California': 423967, 'Texas': 695662, 'New York': 141297,
             'Florida': 170312, 'Illinois': 149995}
area = pd.Series(area_dict)

# Combining the above two data frames 
states = pd.DataFrame({'population': population,
                       'area': area})
states

# Now if we see the index of the states then 

states.index # calling index as a method
states.columns # calling columns as a method 


